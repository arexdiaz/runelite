name: Daily Update

on:
  schedule:
    - cron:  '0 7 * * *'

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: master

      - name: Setup Git
        run: |
          git config --global user.name 'arexdiaz'
          git config --global user.email 'arexito@icloud.com'

      - name: Check if fork is up-to-date
        id: check
        run: |
          git fetch upstream
          UPSTREAM=${1:-'@{u}'}
          LOCAL=$(git rev-parse @)
          REMOTE=$(git rev-parse "$UPSTREAM")
          BASE=$(git merge-base @ "$UPSTREAM")
          
          if [ $LOCAL = $REMOTE ]; then
              echo "Up-to-date"
              echo "::set-output name=status::up-to-date"
          elif [ $LOCAL = $BASE ]; then
              echo "Need to pull"
              echo "::set-output name=status::behind"
          else
              echo "Diverged"
              echo "::set-output name=status::diverged"
          fi

      - name: Stop if up-to-date
        run: exit 1
        if: steps.check.outputs.status == 'up-to-date'

      - name: Sync Fork and Merge
        run: |
          git fetch upstream
          git pull upstream master
          git checkout -b patched-test
          git merge master
          git push origin patched-test
          
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 11

      - name: Print dependency tree
        run: mvn dependency:tree

      - name: Build
        run: mvn clean install -DskipTests

      - name: Extract artifact name
        id: artifact
        run: echo "::set-output name=ARTIFACT_NAME::$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)"

      - name: Get timestamp
        id: timestamp
        run: echo "::set-output name=timestamp::$(date +'%Y%m%d%H%M')"

      - name: Release-Test
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.timestamp.outputs.timestamp }}
          release_name: Release ${{ steps.artifact.outputs.ARTIFACT_NAME }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./runelite-client/target/client-${{ steps.artifact.outputs.ARTIFACT_NAME }}-shaded.jar
          asset_name: client-${{ steps.artifact.outputs.ARTIFACT_NAME }}-shaded.jar
          asset_content_type: application/java-archive

